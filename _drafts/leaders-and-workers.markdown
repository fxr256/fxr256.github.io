---
layout: post
title:  "Leaders and workers"
date:   2019-05-22 17:58:01 +0100
categories: testing
---
Something strange happens in big development organisations: The speed of progress correlates less and less with the number of people. This is not too surprising given the higher needs for communication and coordination and probably cannot be avoided. However, this effect is stronger in some organizations than in others. Once an organisation is big enough, you will end up with people who don't exactly work. From my point of view work when developing software is limited to four activities: 
- Writing Code
- Managing your own infrastructure
- Selling the product
- Doing customer support

If you follow this definition, you will notice that a significant percentage of your workforce doesn't actually work. How high this percentage is clearly varies from company to company. What do these people do? Some of them can be lumped into "supporting" rules. They may work in human ressources, work as assistants to managers / teams or they might take care of the book keeping. How many people you need in those supportive rules is unclear: Young companies tend to have very few supporters, while bigger / older companies have quite a lot of them. While they may drain the companies funds, they generally don't get in the worker's way. More interesting are the people that do. The men and women pulling the strings and making the decisions. The *leaders*. They come in various forms: Some leaders are your superiors and hence have direct influence over your doings. Others have only indirect / soft influence over you. They might be software architects, product owners or lead developers either in your team or in a team you need to cooperate with. All of these people are somewhat part of the development process and they may even write code from time to time, but their main job is *managing*, *coordinating* and *organizing* people. And this is where things can become dangerous.

There is a very distinct line between managing problems and actually solving them. At some point in time somebody has to do something to fix an issue. There might be a lot of managing / supporting roles involved in the process, but if you boil it down, they are optional. This might not be true in huge organizations with very involved processes, but it is in small companies / start-ups. And even in huge organization magic can happen if two or three developers from different teams just sit down together and start solving a shared problem. I've seen a lot of unnecessary friction and glacial development speed caused by leader-only communication. Details get lost, statements distorted and everything becomes complicated and slow. Every task needs to be planned, prioritized, logged into whatever planning tool the teams use and then assigned to someone. Afterwards, the developers need to be assigned and maybe the planning will even work out in the end.

I'm not delusional, so I accept that some level of coordination is necessary in a big development organization. However, one needs to limit the amount of man power invested into coordination. If too many people are leading and too few people are actually working, then progress will be slow and working will be very tedious. I like to keep this in mind by calculation a leaders-to-workers-ratio for topics that I'm working on. It is trivial: You simply devide the number of involved leaders through the number of involved workers. The smaller this number is, the better. While it is theoretically possible to have too little leaders, this problem very rarely occurs in practice. Instead, examples of too many leaders in a task are legion. In general, you are in trouble as soon as the leader to worker score gets close to one. Some readers might consider it utterly ridiculous that there are teams with a leader for every worker. Sadly, it can be much worse: I once sat in a meeting where I was the singular worker. I was supposed to adapt some of my team's code so that another team's API gets called in a certain way. The code change itself was trivial, but as we had made bad experiences with the other team in the past, a lot of planning was scheduled. There were five other people in the meeting with me, all of them leaders: My product owner, my software architect, my manager, the other team's product owner and their architect. All of them had gathered to discuss what I was supposed to do. Needless to say, the meeting wasn't overly productive. Fortunately, I was allowed to work more or less unsupervised once the planning was ironed out. If you're a developer, be watchful! Topics with too many leaders will turn into a coordination mess very quickly. Also, they tend to be filled with a lot of corporate politics as this is how many of those leaders try to get ahead. Getting caught in political games as a worker is often unwise and rarely enjoyable. 

So, after all this talk about too many leaders, you might wonder why so many of them exist in the first place. After all, it is glaring obvious that no efficient work can take place under such circumstances. Why isn't this prevented? Well, my theory is that those coordination roles are a great storage for not particulary skilled people. I work in a country with very strict worker protection laws which means that it is close to impossible to fire someone. To make things worse, my current company is extremly tolerant towards low performance and doesn't even attempt to get rid of any low-performers. Under these circumstances, you have to find a way to occupy all these bad employees, preferably in a position where their incompetence cannot harm the company. You cannot let them work as developers as bad code corrupts the code base, you cannot let them work in sales or consulting as they will aggrevate the customers. So, you find them some internal position where they cannot cause any additional harm. Naturally, they prevent the more productive parts of the company from working, but as this is not directly observable, it tends to fly under the radar. There is no drive to address the issue and bringing it up will only cause a lot of friction. So, my advice is to just live with it unless you are in a position of great power within your company. I want to point out that I don't consider all leaders as useless. Of course there a great leaders out there who are highly competent. There are many situations where a worker is desperately looking for a leader to make a decision, but often they are conspicously absent in those situations. A bad leader is always there if you don't need him and absent when you do.

To wrap up, you should always keep the leader to worker ration in mind. If you are a worker you should try to keep the number of leaders involved in a topic to a minimum by being selective in your communication. It is most often a bad idea to invite too many workers to a meeting or to add too many of them to an email communication. You might think that you are doing a good thing by informing everybody, but in practice you will just slow everybody down. Remember: It is easier to ask for forgiveness then to get permission! Also, you should avoid any topics with a high concentration of leaders if you value quick progress and smooth sailing. If you are a leader you can help by not doing anything especially by not getting involved into every topic. Only get involved if you have to or if you are asked to by a worker. Your team will perform better and the topics you do get involved in will be more pleasant as you are welcomed there. When you are needed, you should step in with enthusiasm and with the necessary bravery to make hard decisions.