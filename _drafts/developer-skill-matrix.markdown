---
layout: post
title:  "Skill: Not all developers are born equal"
date:   2019-02-01 16:50:34 +0100
categories: people
---
It seems obvious at first glance that some developers are much better at their job than others. After all, we know that some football players are better than others and we also know that some lawyers are better than others, so why shouldn't this be true for developers as well? In fact, there are [studies](https://cacm.acm.org/blogs/blog-cacm/180512-is-there-a-10x-gap-between-best-and-average-programmers-and-how-did-it-get-there/fulltext) backing this claim. Furthermore, this variance in productivity is known in parts of the industry. For example, [Alan Eustace](https://en.wikipedia.org/wiki/Alan_Eustace) gave this statement in an [interview](https://www.wsj.com/articles/SB113271436430704916):
> One top-notch engineer is worth "300 times or more than the average," explains Alan Eustace, a Google vice president of engineering. He says he would rather lose an entire incoming class of engineering graduates than one exceptional technologist. Many Google services, such as Gmail and Google News, were started by a single person, he says.

There are lot of things one can nit-pick about either the studies or Mr. Eustace's statement. Nevertheless, I think it is foolish to dismiss these findings: Developer productivity does indeed vary greatly between individuals. Furthermore, science indicates that people with roughly the same level of performance are often found in different teams / companies. That means that high-performer like to hang out with other high-performers and vice versa.

One big problem is that there is no proper way to [measure productivity](https://martinfowler.com/bliki/CannotMeasureProductivity.html). Many different metrics have been suggested in the last years. All of them are [deeply flawed](https://nortal.com/de/blog/the-myth-of-developer-productivity/). Nevertheless, this does not mean that we can ignore this variance. We still have to manage it and this is the point of this article.

How do you manage developers with highly different skill levels? In my opinion, the first and most important step is to accept this fact. A lot of managers still think in terms of full-time employees who are more or less the same. This is a very convenient view as it allows mindlessly shuffling around developers between teams / project, but it is completely wrong. Five high-performing developers are not equivalent to five mediocre ones or even five terrible ones. Also, competency is at least partially context dependent: A developer is much more productive if he is familiar with the used technology, patterns and the code base. A great Java developer might only be a mediocre C developer. By reorganizing teams too often and too naively, managers can easily reduce developer productivity. It is very important to have a good idea about the distribution of skill levels in your team. As already mentioned it is very difficult to properly measure productivity. Hence, I have come up with a more simplified way to categorize team members:

![UI image](/images/matrix.png)

As you can see, I have divided team members into four groups, similar to the way products are categorized in the [BCG matrix](https://www.strategicmanagementinsight.com/tools/bcg-matrix-growth-share.html). The x-axis measures the raw output of a developer (lines of code, amount of bugs fixed, amount of customer issues solved etc.) while the y-axis is the quality of this output. This is, of course, a very simplified and rough view, but the "fuzzy" nature of this problem makes it hard to come up with a more precise one. In the lower left corner we have developers with low output and low quality. I've dubbed this **plants** as their presence in the office does not really make a difference (similar to potted plants). Their low quality it not overly important as their output is so low. They will not mess up your code base beyond repair or ostracize all your customers because of how badly they solve the support requests. Nevertheless, they can cause a lot of [resentment](https://stevemcconnell.com/articles/dealing-with-problem-programmers/) in the team. Still, it is probably not a good idea to focuse too much management "energy" on them as the return of investment is so low.

On the upper left corner, we have the **glaciers**. These are developers with high quality, but low output. Like glaciers they will arrive at their destination after a while, but the progress is so slow that it is almost impossible to observe. In general, glaciers are okay co-workers as they are very throughrough and don't cause too many problems. Some even have the potential to grow into great developers over time if their slow speed is caused by a lack of knowledge or experience. However, there are some developers with decades of experience, who are slow nevertheless. In that case, my recommendation is to just accept them as they are. It is important not to assign any time critical tasks to a glacier as this will lead to a lot of frustration on both sides. As long as this is kept in mind, glaciers are not a threat to the team performance.

